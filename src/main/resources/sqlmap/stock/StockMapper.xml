<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trenska.longwang.dao.stock.StockMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.trenska.longwang.entity.stock.Stock">
        <result column="stock_id" property="stockId"/>
        <result column="stock_no" property="stockNo"/>
        <result column="stock_time" property="stockTime"/>
        <result column="busi_no" property="busiNo"/>
        <result column="cust_id" property="custId"/>
        <result column="stock_type" property="stockType"/>
        <result column="oper_type" property="operType"/>
        <result column="audit_stat" property="auditStat"/>
        <result column="stat" property="stat"/>
        <result column="emp_id" property="empId"/>
        <result column="shipman_id" property="shipmanId"/>
        <result column="stock_remarks" property="stockRemarks"/>
        <association column="emp_id" property="empName"
                     select="com.trenska.longwang.dao.sys.SysEmpMapper.selectNameById"/>
        <association column="shipman_id" property="shipman"
                     select="com.trenska.longwang.dao.sys.SysEmpMapper.selectNameById"/>
        <collection column="stock_no" property="stockDetails"
                    select="com.trenska.longwang.dao.stock.StockDetailMapper.selectByStockNo"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        ts.stock_id,ts.stock_no,ts.cust_id,ts.oper_type,ts.busi_no,ts.stock_type,
        ts.stock_time,ts.stat,ts.audit_stat,ts.emp_id,ts.shipman_id,ts.stock_remarks
    </sql>

    <select id="selectStockDetailCountSelective" resultType="java.lang.Integer">
        select count(1)
        from t_stock_details tsds
        <trim prefix="where" prefixOverrides="and">
            <if test="beginTime != null and endTime != null ">
                tsds.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="stockType != null and stockType != ''">
                and tsds.stock_type like concat('%',#{stockType},'%')
            </if>
            <if test="operType != null and operType != ''">
                and tsds.oper_type like concat('%',#{operType},'%')
            </if>
            <if test="busiNo != null and busiNo != ''">
                and tsds.busi_no like concat('%',#{busiNo},'%')
            </if>
            <if test="goodsId != null">
                and tsds.goods_id = #{goodsId}
            </if>
        </trim>
    </select>

    <select id="selectStockDetailPageSelective" resultType="com.trenska.longwang.entity.stock.StockDetails">
        select
        <include refid="com.trenska.longwang.dao.stock.StockDetailsMapper.Base_Column_List"/>
        ,case when tsds.history >0 then tsds.history else tsds.history*-1 end as history
        from t_stock_details tsds
        <trim prefix="where" prefixOverrides="and">
            <if test="beginTime != null and endTime != null ">
                tsds.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="stockType != null and stockType != ''">
                and tsds.stock_type like concat('%',#{stockType},'%')
            </if>
            <if test="operType != null and operType != ''">
                and tsds.oper_type like concat('%',#{operType},'%')
            </if>
            <if test="busiNo != null and busiNo != ''">
                and tsds.busi_no like concat('%',#{busiNo},'%')
            </if>
            <if test="goodsId != null">
                and tsds.goods_id = #{goodsId}
            </if>
        </trim>
        order by tsds.timestamp desc
    </select>
    <!--stockout用于计算可用库存-->
    <select id="selectStockStatusPage" resultMap="com.trenska.longwang.dao.goods.GoodsMapper.simpleInfoResultMap">
        select tg.goods_id,tg.goods_name,tg.goods_no,tg.brand_name,tg.frt_cat_name,tg.scd_cat_name,
        (select unit_name from t_unit where unit_id = tg.main_unit_id) as mainUnit,tg.stock,tg.stockout
        from t_goods as tg
        <if test="propName != null and propName != ''">
            ,t_goods_spec as tgs
        </if>
        where tg.deleted = 0
        <trim prefix="and" prefixOverrides="and">
            <if test="brandName != null and brandName != ''">
                and tg.brand_name like concat('%',#{brandName},'%')
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
            <if test="propName != null and propName != ''">
                and tg.goods_id = tgs.goods_id
                and tgs.prop_name like concat('%',#{propName},'%')
            </if>
        </trim>
    </select>

    <select id="selectStockStatusPageCount" resultType="java.lang.Integer">
        select count(1)
        from t_goods as tg
        <if test="propName != null and propName != ''">
            ,t_goods_spec as tgs
        </if>
        where tg.deleted = 0
        <trim prefix="and" prefixOverrides="and">
            <if test="brandName != null and brandName != ''">
                and tg.brand_name like concat('%',#{brandName},'%')
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
            <if test="propName != null and propName != ''">
                and tg.goods_id = tgs.goods_id
                and tgs.prop_name like concat('%',#{propName},'%')
            </if>
        </trim>


    </select>

    <!--根据stockNo获取库存详情-->
    <select id="selectDetailByStockNo"
            resultMap="com.trenska.longwang.dao.stock.StockDetailMapper.SimpleStockDetailResultMap">
        select ts.stock_id, ts.stock_no ,ts.stock_time ,ts.stat,ts.emp_id,ts.stock_remarks
        from t_stock ts ,t_stock_detail tsd
        where ts.stock_no = tsd.stock_no
        <trim prefix="and" prefixOverrides="and">
            <if test="stockNo != null and stockNo != ''">
                and ts.stock_no = #{stockNo}
            </if>
        </trim>
    </select>

    <select id="selectStockInfo" resultMap="DetailStockResultMap">
        select ts.stock_id,ts.stock_no,ts.stock_time,ts.oper_type,ts.stat,ts.emp_id,ts.stock_remarks,ts.busi_no,ts.cust_id
        from t_stock as ts
        <trim prefix="where" prefixOverrides="and">
            <if test="stockNo != null and stockNo != ''">
                and ts.stock_no = #{stockNo}
            </if>
            <if test="beginTime != null and endTime != null ">
                and ts.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="stockType != null and stockType != ''">
                and ts.stock_type = #{stockType}
            </if>
            <if test="operType != null and operType != ''">
                and ts.oper_type = #{operType}
            </if>
            <if test="busiNo != null and busiNo != ''">
                and ts.busi_no like concat('%',#{busiNo},'%')
            </if>
            <if test="stat != null">
                and ts.stat = #{stat}
            </if>
        </trim>
        order by ts.stock_time desc
    </select>

    <select id="selectStockSelective" resultMap="com.trenska.longwang.dao.stock.StockMapper.StockSimpleInfoResultMap">

        select ts.stock_id,ts.stock_no,ts.stock_time,ts.busi_no,ts.stock_time,ts.stock_type,ts.oper_type,ts.emp_id,ts.stat
        from t_stock ts
        <trim prefix="where" prefixOverrides="and">
            <if test="beginTime != null and endTime != null ">
                and ts.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="stockNo != null and stockNo != ''">
                and ts.stock_no like concat('%',#{stockNo},'%')
            </if>
            <if test="busiNo != null and busiNo != ''">
                and ts.busi_no like concat('%',#{busiNo},'%')
            </if>
            <if test="stat != null">
                and ts.stat = #{stat}
            </if>
            <!-- 由于此分页是入库/出库通用分页，所以stockType和operType一直都会有，而且是确定的值，不做模糊匹配 -->
            <if test="operType != null and operType != ''">
                and ts.oper_type = #{operType}
            </if>
            <if test="stockType != null and stockType != ''">
                and ts.stock_type = #{stockType}
            </if>
        </trim>
        group by ts.stock_time desc

    </select>
    <select id="selectStockCountSelective" resultType="java.lang.Integer">
        select count(1)
        from t_stock ts
        <trim prefix="where" prefixOverrides="and">
            <if test="beginTime != null and endTime != null ">
                and ts.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="stockNo != null and stockNo != ''">
                and ts.stock_no like concat('%',#{stockNo},'%')
            </if>
            <if test="busiNo != null and busiNo != ''">
                and ts.busi_no like concat('%',#{busiNo},'%')
            </if>
            <if test="stat != null">
                and ts.stat = #{stat}
            </if>
            <!-- 由于此分页是入库/出库通用分页，所以stockType和operType一直都会有，而且是确定的值，不做模糊匹配 -->
            <if test="operType != null and operType != ''">
                and ts.oper_type = #{operType}
            </if>
            <if test="stockType != null and stockType != ''">
                and ts.stock_type = #{stockType}
            </if>
        </trim>

    </select>

    <select id="selectByBusiNo" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_stock ts
        where ts.stat = 1
        and ts.busi_no = #{busiNo}

    </select>
    <!-- 获取订货单的出库记录 -->
    <select id="selectIndentStockoutByBusiNo" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_stock ts
        where ts.stat = 1
        and ts.stock_type = '出库单'
        and ts.busi_no = #{busiNo}
    </select>

    <resultMap id="StockSimpleInfoResultMap" type="com.trenska.longwang.entity.stock.Stock">
        <id column="stock_id" property="stockId"/>
        <result column="stock_no" property="stockNo"/>
        <result column="busi_no" property="busiNo"/>
        <result column="stock_time" property="stockTime"/>
        <result column="oper_type" property="operType"/>
        <result column="stock_type" property="stockType"/>
        <result column="stat" property="stat"/>
        <association column="emp_id" property="empName" select="com.trenska.longwang.dao.sys.SysEmpMapper.selectNameById"/>
    </resultMap>

    <resultMap id="DetailStockResultMap" type="com.trenska.longwang.entity.stock.Stock">
        <id column="stock_id" property="stockId"></id>
        <result column="stock_no" property="stockNo"/>
        <result column="stock_time" property="stockTime"/>
        <result column="oper_type" property="operType"/>
        <result column="busi_no" property="busiNo"/>
        <result column="cust_id" property="custId"/>
        <result column="stat" property="stat"/>
        <result column="emp_id" property="empId"/>
        <result column="stock_remarks" property="stockRemarks"/>
        <association column="emp_id" property="empName" select="com.trenska.longwang.dao.sys.SysEmpMapper.selectNameById"/>
    </resultMap>

    <select id="selectRecordOfMaxId" resultType="com.trenska.longwang.entity.stock.Stock">
        select
        <include refid="Base_Column_List"/>
        from t_stock ts
        where ts.stock_id = (select max(stock_id) from t_stock where stock_type = #{stockType})
    </select>

    <!-- 获取商品类型为"期初入库"的库存的方法 -->
    <select id="selectQckcStock" resultType="java.lang.String">
        select stock from t_stock_details where oper_type = '期初入库' and goods_id = #{goodsId}
    </select>

    <!-- 获取商品期初库存的方法 -->
    <select id="selectGoodsInitStock" resultType="java.lang.String">
        select stock from t_stock_details
        where id = (select max(id) from t_stock_details where stock_time <![CDATA[<=]]> #{beginTime} and goods_id = #{goodsId})
    </select>
    <!-- 进出库数量汇总  -->
    <select id="selectGoodsStockSummarizing" resultMap="GoodsStockSummarizingResultMap">
        select
        tg.goods_id as goodsId,ifnull(tg.goods_no,"") as goodsNo,tg.goods_name as goodsName,
        ifnull(tg.brand_name,"") as brandName,tg.unitId as unitId,
        #{beginTime} as beginTime,#{endTime} as endTime,
        sum(if(tsd.oper_type = '生产入库',tsd.history,0)) as makeIn,
        sum(if(tsd.oper_type = '采购入库',tsd.history,0)) as purchaseIn,
        sum(if(tsd.oper_type = '退货出库',tsd.history,0)) as returnsOut,
        sum(if(tsd.oper_type = '退货入库',tsd.history,0)) as returnsIn,
        sum(if(tsd.oper_type = '销售出库',tsd.history,0)) as salesOut,
        sum(if(tsd.oper_type = '报溢入库',tsd.history,0)) as overflow,
        sum(if(tsd.oper_type = '报损出库',tsd.history,0)) as breakage,
        sum(if(tsd.oper_type = '其他入库',tsd.history,0)) as otherIn,
        sum(if(tsd.oper_type = '其他出库',tsd.history,0)) as otherOut
        from (
            select tg.goods_id as goods_id,tg.goods_no as goods_no,tg.goods_name as
            goods_name,tg.main_unit_id as unitId,tg.brand_name as brand_name
            from t_goods tg,
            (
            select goods_id from t_stock_details
            where id in (
                select max(id) from t_stock_details
                where stock_time <![CDATA[<=]]> #{beginTime} group by goods_id
            )
            and stock > 0
            union
                select distinct goods_id from t_stock_details
                where stock_time between #{beginTime} and #{endTime}
            ) as tg2
            <if test="specPropId != null">
                ,t_goods_spec  as tgs
            </if>
            where tg.goods_id = tg2.goods_id
            <trim prefix="and" prefixOverrides="and">
              <if test="brandName != null and brandName != ''">
                  and tg.brand_name = #{brandName}
              </if>
              <if test="combine != null and combine != ''">
                  and instr(tg.combine,#{combine})
              </if>
              <if test="frtCatName != null and frtCatName != ''">
                  and tg.frt_cat_name = #{frtCatName}
              </if>
              <if test="scdCatName != null and scdCatName != ''">
                  and tg.scd_cat_name = #{scdCatName}
            </if>
              <if test="specPropId != null">
                  and tgs.goods_id = tg.goods_id
                  and tgs.spec_prop_id = #{specPropId}
              </if>
            </trim>
        ) as tg
        left join(
          select stock_type,oper_type,history,goods_id,unit_name from t_stock_details
            <trim prefix="where" prefixOverrides="and">
                <if test="beginTime != null and endTime != null ">
                    and stock_time between #{beginTime} and #{endTime}
                </if>
                <if test="operType != null and operType != ''">
                    and oper_type = #{operType}
                </if>
            </trim>
        ) as tsd
        on tg.goods_id = tsd.goods_id
        group by tg.goods_id
        order by tg.goods_no
    </select>

    <resultMap id="GoodsStockSummarizingResultMap" type="com.trenska.longwang.model.report.GoodsStockSummarizingModel" autoMapping="true">
        <result column="goodsId" property="goodsId"/>
        <result column="goodsNo" property="goodsNo"/>
        <result column="goodsName" property="goodsName"/>
        <result column="salesout" property="salesOut"/>
        <result column="brandName" property="brandName"/>
        <result column="makeIn" property="makeIn"/>
        <result column="purchaseIn" property="purchaseIn"/>
        <result column="returnsIn" property="returnsIn"/>
        <result column="beginTime" property="beginTime"/>
        <result column="endTime" property="endTime"/>
        <result column="returnsOut" property="returnsOut"/>
        <result column="otherIn" property="otherIn"/>
        <result column="otherOut" property="otherOut"/>
        <association column="unitId" property="unitName" select =
                "com.trenska.longwang.dao.goods.UnitMapper.selectUnitNameById"/>
        <association column="{goodsId=goodsId,beginTime=beginTime}" property="initStock"
                     select="com.trenska.longwang.dao.stock.StockMapper.selectGoodsInitStock" />
        <collection column="goodsId" property="propNames" select="com.trenska.longwang.dao.goods.GoodsSpecMapper.getPropNamesByGoodsId"/>
    </resultMap>
    <select id="selectGoodsStockSummarizingCount" resultType="int">
        select count(goodsId) from (
        select
        tg.goods_id as goodsId
        from (
        select tg.goods_id as goods_id,tg.goods_no as goods_no,tg.goods_name as goods_name,
        tg.brand_name as brand_name
        from t_goods tg,
        (
        select goods_id from t_stock_details
        where id in (
            select max(id) from t_stock_details
            where stock_time <![CDATA[<=]]> #{beginTime} group by goods_id
        )
        and stock > 0
        union
            select distinct goods_id from t_stock_details
            where stock_time between #{beginTime} and #{endTime}
        ) as tg2
        <if test="specPropId != null">
            ,t_goods_spec  as tgs
        </if>
        where tg.goods_id = tg2.goods_id
        <trim prefix="and" prefixOverrides="and">
            <if test="brandName != null and brandName != ''">
                and tg.brand_name = #{brandName}
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
            <if test="specPropId != null">
                and tgs.goods_id = tg.goods_id
                and tgs.spec_prop_id = #{specPropId}
            </if>
        </trim>
        ) as tg
        left join(
        select stock_type,oper_type,history,goods_id,unit_name from t_stock_details
        <trim prefix="where" prefixOverrides="and">
            <if test="beginTime != null and endTime != null ">
                and stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="operType != null and operType != ''">
                and oper_type = #{operType}
            </if>
        </trim>
        ) as tsd
        on tg.goods_id = tsd.goods_id
        group by tg.goods_id
        order by tg.goods_no) as tmp
    </select>

    <!--商品入库报表合计-->
    <select id="selectGoodsStockinSummation" resultType="com.trenska.longwang.model.report.GoodsStockinSummationModel">
        select sum(tsd.history) as stockinNumSum ,sum(tsd.history*tsd.stock_price) as stockinAmntSum
        from t_stock_details tsd , t_goods tg
        where tsd.goods_id = tg.goods_id
        and tsd.stock_type in( '入库单','入库单(作废)')
        <trim prefixOverrides="and" prefix="and">
            <if test="beginTime != null and endTime != null ">
                and tsd.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="operType != null and operType != '' ">
                and tsd.oper_type = #{operType}
            </if>
            <if test="brandName != null and brandName != ''">
                and tg.brand_name = #{brandName}
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
        </trim>
    </select>
    <!--商品入库报表-->
    <select id="selectGoodsStockinStatistic" resultMap="GoodsStockinStatisticsResultMap">
        select tg.goods_id as goodsId , tg.goods_name as goodsName , ifnull(tg.goods_no,"") as goodsNo , tu.unit_name as unitName,
        sum(tsd.history) as stockinNum ,
        sum(tsd.history*tsd.stock_price) as stockinAmnt ,
        sum(tsd.history*tsd.stock_price)/sum(tsd.history) as avgPrice
        from t_stock_details tsd , t_goods tg , t_unit tu
        where tsd.goods_id = tg.goods_id
        and tg.main_unit_id = tu.unit_id
        and tsd.stock_type in( '入库单','入库单(作废)')
        <trim prefixOverrides="and" prefix="and">
            <if test="beginTime != null and endTime != null ">
                and tsd.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="operType != null and operType != '' ">
                and tsd.oper_type = #{operType}
            </if>
            <if test="brandName != null and brandName != ''">
                and tg.brand_name = #{brandName}
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
        </trim>
        group by tsd.goods_id
        having sum(tsd.history) != 0
    </select>

    <resultMap id="GoodsStockinStatisticsResultMap" type="com.trenska.longwang.model.report.GoodsStockinStatisticsModel" autoMapping="true">
        <result property="goodsId" column="goodsId"/>
        <association property="propNames" column="goodsId" select="com.trenska.longwang.dao.goods.GoodsSpecMapper.getPropNamesByGoodsId"/>
    </resultMap>

    <select id="selectGoodsStockinStatisticsCount" resultType="java.lang.Integer">
        select count(1)
        from t_stock_details tsd , t_goods tg , t_unit tu
        where tsd.goods_id = tg.goods_id
        and tg.main_unit_id = tu.unit_id
        and tsd.stock_type in ( '入库单','入库单(作废)')
        <trim prefixOverrides="and" prefix="and">
            <if test="beginTime != null and endTime != null ">
                and tsd.stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="operType != null and operType != '' ">
                and tsd.oper_type = #{operType}
            </if>
            <if test="brandName != null and brandName != ''">
                and tg.brand_name = #{brandName}
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
        </trim>
        group by tsd.goods_id
        having  sum(tsd.history) != 0
    </select>
    <select id="selectStockNoOfMaxId" resultType="java.lang.String">
        select ts.stock_no
        from t_stock ts
        where ts.stock_id = (select max(stock_id) from t_stock where substring(stock_type,1,3) = #{stockType})
        group by ts.stock_no
    </select>

    <select id="selectInitStockSum" resultType="java.lang.String">
        select ifnull(sum(tsd.stock) ,"0")from t_stock_details tsd,
        (select max(tsdin1.id) as id from t_stock_details tsdin1,
        (select tg.goods_id from t_goods tg
            <if test="specPropId != null">
                ,t_goods_spec as tgs
            </if>
            <trim prefix="where" prefixOverrides="and">
                <if test="brandName != null and brandName != ''">
                    and tg.brand_name = #{brandName}
                </if>
                <if test="combine != null and combine != ''">
                    and instr(tg.combine,#{combine})
                </if>
                <if test="frtCatName != null and frtCatName != ''">
                    and tg.frt_cat_name = #{frtCatName}
                </if>
                <if test="scdCatName != null and scdCatName != ''">
                    and tg.scd_cat_name = #{scdCatName}
                </if>
                <if test="specPropId != null">
                    and tgs.goods_id = tg.goods_id
                    and tgs.spec_prop_id = #{specPropId}
                </if>
            </trim>
        ) as tgin
        where tsdin1.stock_time <![CDATA[<=]]> #{beginTime}
        and tsdin1.goods_id = tgin.goods_id
        group by tsdin1.goods_id
        union
        select id from t_stock_details tsdin2
        <if test="(brandName != null and brandName != '')
                or (combine != null and combine != '')
                or (frtCatName != null and frtCatName != '')
                or (scdCatName != null and scdCatName != '')
                or (specPropId != null)">
            ,t_goods tg
        </if>
        <if test="specPropId != null">
            ,t_goods_spec as tgs
        </if>
        where tsdin2.oper_type = '期初入库' and tsdin2.stock_time between #{beginTime} and #{endTime}
        <if test="(brandName != null and brandName != '')
                or (combine != null and combine != '')
                or (frtCatName != null and frtCatName != '')
                or (scdCatName != null and scdCatName != '')
                or (specPropId != null)">
            and tg.goods_id = tsdin2.goods_id
        </if>
        <trim prefix="and" prefixOverrides="and">
            <if test="brandName != null and brandName != ''">
                and tg.brand_name = #{brandName}
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
            <if test="specPropId != null">
                and tgs.goods_id = tg.goods_id
                and tgs.spec_prop_id = #{specPropId}
            </if>
        </trim>) as tmp
        where tsd.id = tmp.id
    </select>

    <!-- 进出库数量汇总期末库存,如果没有满足条件的记录那么表示这段时间没有库存操作，设置为-1，程序中判断是否为-1，如果为-1将期末库存设置为期初库存 -->
    <select id="selectGoodsOverStock" resultType="java.lang.String">
        select tsd1.stock
        from t_stock_detail tsd1
        where tsd1.detail_id = (
            select max(tsd2.detail_id)
            from t_stock_detail tsd2
            where tsd2.stock_time between #{beginTime} and #{endTime}
            and tsd2.goods_id = #{goodsId}
            and stat = 1
        )
        and tsd1.goods_id = #{goodsId}
    </select>
    <select id="selectByStockNo" resultType="com.trenska.longwang.entity.stock.Stock">
        select <include refid="Base_Column_List"/>
        from t_stock ts
        where stock_no = #{stockNo}
        for update
    </select>
    <select id="selectGoodsStockSummation"
            resultType="com.trenska.longwang.model.report.GoodsStockSummationModel">
        select
        sum(if(tsd.oper_type = '生产入库',tsd.history,0)) as makeInSum,
        sum(if(tsd.oper_type = '采购入库',tsd.history,0)) as purchaseInSum,
        sum(if(tsd.oper_type = '退货出库',tsd.history,0)) as returnsOutSum,
        sum(if(tsd.oper_type = '退货入库',tsd.history,0)) as returnsInSum,
        sum(if(tsd.oper_type = '销售出库',tsd.history,0)) as salesOutSum,
        sum(if(tsd.oper_type = '报溢入库',tsd.history,0)) as overflowSum,
        sum(if(tsd.oper_type = '报损出库',tsd.history,0)) as breakageSum,
        sum(if(tsd.oper_type = '其他入库',tsd.history,0)) as otherInSum,
        sum(if(tsd.oper_type = '其他出库',tsd.history,0)) as otherOutSum
        from (
        select tg.goods_id as goods_id,tg.goods_no as goods_no,tg.goods_name as goods_name,
        tg.brand_name as brand_name
        from t_goods tg,
        (
        select goods_id from t_stock_details
        where id in (
            select max(id) from t_stock_details
            where stock_time <![CDATA[<=]]> #{beginTime} group by goods_id  <!-- 查询有交易时间段之前库存不为0即有"期初"的商品 -->
        )
        and stock > 0
        union
            select distinct goods_id from t_stock_details
            where stock_time between #{beginTime} and #{endTime} <!-- 查询有交易的商品 -->
        ) as tg2
        <if test="specPropId != null">
            ,t_goods_spec  as tgs
        </if>
        where tg.goods_id = tg2.goods_id
        <trim prefix="and" prefixOverrides="and">
            <if test="brandName != null and brandName != ''">
                and tg.brand_name = #{brandName}
            </if>
            <if test="combine != null and combine != ''">
                and instr(tg.combine,#{combine})
            </if>
            <if test="frtCatName != null and frtCatName != ''">
                and tg.frt_cat_name = #{frtCatName}
            </if>
            <if test="scdCatName != null and scdCatName != ''">
                and tg.scd_cat_name = #{scdCatName}
            </if>
            <if test="specPropId != null">
                and tgs.goods_id = tg.goods_id
                and tgs.spec_prop_id = #{specPropId}
            </if>
        </trim>
        ) as tg
        left join(
        select stock_type,oper_type,history,goods_id,unit_name from t_stock_details
        <trim prefix="where" prefixOverrides="and">
            <if test="beginTime != null and endTime != null ">
                and stock_time between #{beginTime} and #{endTime}
            </if>
            <if test="operType != null and operType != ''">
                and oper_type = #{operType}
            </if>
        </trim>
        ) as tsd
        on tg.goods_id = tsd.goods_id
    </select>
</mapper>
